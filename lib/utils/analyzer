#!/usr/bin/env node

/**
 * A cli utility for analyzing database files
 */

"use strict";
var Program = require('commander'),
	fs = require('fs'),
	path = require('path'),
	AnalyzeCore = require('../lib/analyze/AnalyzeCore');

const MS_1_MINUTE = 60 * 1000,
	MS_1_HOUR = 60 * MS_1_MINUTE,
	MS_1_DAY = 24 * MS_1_HOUR;

Program
	.usage('[option] <databaseFolder>')
	.description('A command line tools to analyze tracking data')
	.option('-n, --days <days>', 'how many days you want to analyze', 7)
	.option('-i, --input <databaseFolder>', 'database folder', '')
	.option('-g, --group-by <groupByString>', 'groupBy options using , to split.(ALL,DAY,HOUR,LANGUAGE,FILE,PROJECT,COMPUTER)', 'ALL')
	.option('-f, --filter <filterObjectJSON>', 'filter object: {project:["xx","xx"],computer:["xx"],language:["xx"],file:["xx"]}', '{}')
	.option('-v, --verbose', 'verbosely output analyze information')
	.option('-h, --human-readable', 'decode result and make the time to human readable', false)
	.on('--help', () => {
		console.log(`\n  Example:\n` +
			'\n    ./analyzer ../database' +
			'\n    ./analyzer -h ../database' +
			'\n    ./analyzer -n30 ../database   # analyze 30days record' +
			'\n    ./analyzer -g HOUR,LANGUAGE,PROJECT ../database' +
			'\n    ./analyzer -f "{project:[\'/path/to/project1\']}" ../database'+
			'\n');
	})
Program.parse(process.argv);
process.exit(main()||0);

function main() {
	var databasePath = Program.args[0] || Program.input,
		days = Program.days,
		groupByRaw = Program.groupBy,
		filterJSON = Program.filter,
		humanReadable = Program.humanReadable,
		verbose = Program.verbose;
	if (!databasePath || !fs.existsSync(databasePath))
		return (verbose ? console.error('\n  error: please using analyze tool following a exists path param "databaseFolder"\n')
			: console.error(JSON.stringify(['error: missing or not existed database folder'], null, '  '))), 1;
	//handler date range
	var today = new Date();
	var history = new Date(today);
	history.setDate(history.getDate() - days + 1);

	//handler group by 
	var groupBy = 0;
	groupByRaw.toUpperCase().split(',').forEach(name => groupBy |= AnalyzeCore.GroupBy[name]);

	//handler filter	
	var filterObject = eval(`result=${filterJSON}`);
	
	if (verbose) {
		console.log(`Analyze database folder: ${databasePath}`);
		console.log(`Analyze date range: [${history.toLocaleDateString()}, ${today.toLocaleDateString()}] (${days} days)`);
		console.log(`Analyze group by: ${groupByRaw.toUpperCase()}`);
		console.log(`Analyze filter information: ${filterJSON}`);
		humanReadable && console.log(`Turn on human readable`);
	}

	//------------------------------------------------------------	
	//				Core analyze code
	//------------------------------------------------------------

	var analyzer = new AnalyzeCore(databasePath);
	analyzer.setGroupBy(groupBy);
	analyzer.setFilter(filterObject);
	if (analyzer.analyze(history, today)) {
		var result = analyzer.getResult();
		if (humanReadable)
			result = convert2Readable(result);
		console.log(JSON.stringify(result, null, '  '));
	} else {
		if (verbose) {
			console.error(`error: analyze error, detail information following:`);
		}
		console.error(JSON.stringify(analyzer.getError(), null, '  '));
		return 1;
	}
	return 0;
}	




//-----------------------------------------------------------
//		 functions for convert data human readable
//-----------------------------------------------------------
function convert2Readable(data) {
	data = decodeToHumanReadable(data);
	return convertAllNumber(data);
}
function decodeToHumanReadable(object) {
	Object.keys(object).forEach(key => {
		if (typeof object[key] != 'object') return;
		if (!Object.keys(object[key]).length) {
			delete object[key];
			return;
		}
		decodeToHumanReadable(object[key]);
		
		var decodedKey = decodeURIComponent(key);
		if (decodedKey == key) return;
		object[decodedKey] = object[key];
		delete object[key];
	});
	return object;
}

function convertAllNumber(object) {
	for (var key in object) {
		var type = typeof object[key];
		if (type == 'number')
			object[key] = convertTime2Unit(object[key]);
		else if (type == 'object')
			convertAllNumber(object[key]);	
	}
	return object;
}
function convertTime2Unit(time) {
	if (time > MS_1_DAY)
		return `${(time / MS_1_DAY).toFixed(2)} days`;
	if (time > MS_1_HOUR)
		return `${(time / MS_1_HOUR).toFixed(2)} hours`;
	if (time > MS_1_MINUTE)
		return `${(time / MS_1_MINUTE).toFixed(2)} mins`;
	return `${(time / 1000).toFixed(2)} s`;			
}